<?xml version="1.0" encoding="utf-8"?>
<cruise xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="cruise-config.xsd" schemaVersion="135">
  <server agentAutoRegisterKey="<aark>" webhookSecret="<whs>" commandRepositoryLocation="default" serverId="<sid>" tokenGenerationKey="<tgk>">
    <backup emailOnSuccess="true" emailOnFailure="true" />
    <artifacts>
      <artifactsDir>artifacts</artifactsDir>
    </artifacts>
  </server>
  <pipelines group="PipesToUse">
    <pipeline name="SecretCheck">
      <materials>
        <git url="https://github.com/pawnu/docker-REST.git" />
      </materials>
      <stage name="Test">
        <jobs>
          <job name="SecretCheck">
            <tasks>
              <exec command="trufflehog">
                <arg>--regex</arg>
                <arg>--json</arg>
                <arg>--entropy=False</arg>
                <arg>--max_depth=3</arg>
                <arg>https://github.com/pawnu/docker-REST.git</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="SoftwareCompositionAnalysis">
      <materials>
        <pipeline pipelineName="SecretCheck" stageName="Test" materialName="CheckOutProject" />
        <git url="https://github.com/pawnu/docker-REST.git" materialName="Project" />
      </materials>
      <stage name="Test" cleanWorkingDir="true">
        <jobs>
          <job name="SCA">
            <tasks>
              <exec command="safety">
                <arg>check</arg>
                <arg>-r</arg>
                <arg>requirements.txt</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="StaticApplicationSecurityTesting">
      <materials>
        <pipeline pipelineName="SecretCheck" stageName="Test" materialName="CheckedOutProject" />
        <git url="https://github.com/pawnu/docker-REST.git" materialName="RESTAPI" />
      </materials>
      <stage name="Test" cleanWorkingDir="true">
        <jobs>
          <job name="SAST">
            <tasks>
              <exec command="bandit">
                <arg>-r</arg>
                <arg>.</arg>
                <arg>-lll</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="BuildApplication">
      <materials>
        <git url="https://github.com/pawnu/docker-REST.git" />
      </materials>
      <stage name="Build">
        <jobs>
          <job name="DockerBuild">
            <tasks>
              <exec command="docker">
                <arg>build</arg>
                <arg>-t</arg>
                <arg>flaskapp</arg>
                <arg>.</arg>
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="ContainerImageScan">
      <materials>
        <pipeline pipelineName="BuildApplication" stageName="Build" />
      </materials>
      <stage name="Test">
        <jobs>
          <job name="TrivyScan">
            <tasks>
              <exec command="docker">
                <arg>run</arg>
                <arg>--rm</arg>
                <arg>-v</arg>
                <arg>/home/ubuntu/trivycache/:/root/.cache/</arg>
                <arg>-v</arg>
                <arg>/var/run/docker.sock:/var/run/docker.sock</arg>
                <arg>aquasec/trivy</arg>
                <arg>--clear-cache</arg>
                <runif status="passed" />
              </exec>
              <exec command="docker">
                <arg>run</arg>
                <arg>--rm</arg>
                <arg>-v</arg>
                <arg>/home/ubuntu/trivycache/:/root/.cache/</arg>
                <arg>-v</arg>
                <arg>/var/run/docker.sock:/var/run/docker.sock</arg>
                <arg>aquasec/trivy</arg>
                <arg>--exit-code</arg>
                <arg>1</arg>
                <arg>flaskapp:latest</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
    <pipeline name="LaunchApplication">
      <materials>
        <pipeline pipelineName="BuildApplication" stageName="Build" />
      </materials>
      <stage name="Deploy">
        <jobs>
          <job name="dockerRun">
            <tasks>
              <exec command="docker">
                <arg>run</arg>
                <arg>--network=gocdpipeline</arg>
                <arg>-d</arg>
                <arg>-p</arg>
                <arg>5000:5000</arg>
                <arg>flaskapp</arg>
                <runif status="passed" />
              </exec>
            </tasks>
          </job>
        </jobs>
      </stage>
    </pipeline>
  </pipelines>
</cruise>
